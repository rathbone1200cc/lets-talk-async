/*** Generated by streamline 0.12.1 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__trap=__rt.__trap; (function main(_) { var work; 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    function workOnI() { work.I(workOnJ); } 
    function workOnJ() { work.J(workOnK); } 
    function workOnK() { 
        work.K(function () { 
            console.log('continuing after I, J, K in series'); 
            startParallelWork(); }); } 
    
    
    
    function startParallelWork() { 
        var doneWithWork = {}; 
        work.X(function () { 
            doneWithWork.X = true; 
            continueAfterParallelWork(); }); 
        
        work.Y(function () { 
            doneWithWork.Y = true; 
            continueAfterParallelWork(); }); 
        
        work.Z(function () { 
            doneWithWork.Z = true; 
            continueAfterParallelWork(); }); 
        
        
        function continueAfterParallelWork() { 
            if (doneWithWork.X && doneWithWork.Y && doneWithWork.Z) { 
                console.log('continuing after X, Y, Z in parallel'); } } } var __frame = { name: 'main', line: 1 }; return __func(_, this, arguments, main, 0, __frame, function __$main() { work = require('./mock-work'); return work.A(__cb(_, __frame, 4, 0, function __$main() { return work.B(__cb(_, __frame, 5, 0, function __$main() { return work.C(__cb(_, __frame, 6, 0, function __$main() { _(); }, true, false)); }, true, false)); }, true, false)); }); }.call(this, __trap));